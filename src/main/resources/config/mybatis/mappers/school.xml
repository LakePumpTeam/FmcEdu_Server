<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.fmc.edu.school">

    <sql id="limit-split-page">
        limit #{start}, #{size}
    </sql>

    <select id="querySchoolCount" parameterType="map" resultType="int">
        SELECT count(id)
        FROM school
        <where>
            `city_id` = #{cityId}
            <if test="@Ognl@isNotEmpty(key)">
                and `name` LIKE CONCAT('%', #{key})
            </if>
        </where>
    </select>

    <select id="loadSchool" parameterType="int" resultMap="rm.school">
        SELECT s.id, s.name, s.province_id, s.city_id, s.address_id, a.full_address
        FROM school s
        LEFT JOIN address a on s.address_id = a.id
        WHERE s.id = #{id}
    </select>

    <select id="querySchoolPage" parameterType="map" resultType="map">
        SELECT id as schoolId, `name` as schoolName
        FROM school
        <where>
            `city_id` = #{cityId}
            <if test="@Ognl@isNotEmpty(key)">
                and `name` LIKE CONCAT('%', #{key})
            </if>
        </where>
        <if test="@Ognl@isNotEmpty(start) and @Ognl@isNotEmpty(size)">
            <include refid="limit-split-page" />
        </if>
    </select>

    <select id="queryClassCount" parameterType="map" resultType="int">
        SELECT count(id)
        FROM class
        <where>
            `school_id` = #{schoolId}
            <if test="@Ognl@isNotEmpty(key)">
                and (`grade` LIKE CONCAT('%', #{key}) or `class` LIKE CONCAT('%', #{key}))
            </if>
        </where>

    </select>

    <select id="queryClassPage" parameterType="map" resultType="map">
        SELECT id as classId, grade,class
        FROM class
        <where>
            `school_id` = #{schoolId}
            <if test="@Ognl@isNotEmpty(key)">
                and (`grade` LIKE CONCAT('%', #{key}) or `class` LIKE CONCAT('%', #{key}))
            </if>
        </where>
        <include refid="limit-split-page" />
    </select>

    <select id="queryHeadmaster" parameterType="map" resultType="map">
        select p.id as headTeacherId, p.name as headTeacherName
        from class cls
        left join teacher_class_map tcm
        on tcm.teacher_id = cls.head_teacher_id
        left join profile p
        on p.id = tcm.teacher_id
        where cls.id=#{classId};
    </select>

    <insert id="initialStudent" useGeneratedKeys="true" keyProperty="id"
            parameterType="Student" flushCache="true">
        INSERT INTO student (name, class_id, sex, birth, ring_number, ring_phone, creation_date, last_update_date)
        VALUES (#{name}, #{classId}, #{male}, #{birth}, #{ringNumber}, #{ringPhone}, #{creationDate},
        #{lastUpdateDate})
    </insert>

    <select id="queryStudentIdByFields" parameterType="Student" resultType="int">
        SELECT id
        FROM student
        WHERE NAME = #{name} AND class_id = #{classId}
    </select>

    <update id="updateStudentById" parameterType="Student" flushCache="true">
        UPDATE student
        SET name = #{name}, class_id = #{classId}, sex = #{male}, birth = #{birth}, ring_number = #{ringNumber},
        ring_phone = #{ringPhone}, last_update_date = #{lastUpdateDate}
        WHERE id = #{id}
    </update>

    <select id="queryTeacherById" parameterType="int" resultMap="rm.teacher">
        SELECT id, `name`, phone, app_id, channel_id, creation_date, last_login_date, last_update_date, available, concat(profile_type,
        '') as profile_type,
        school_id, sex, head_teacher, initialized, resume, course, birth
        FROM profile
        LEFT JOIN teacher ON id = profile_id
        WHERE id = #{id}
    </select>

    <select id="queryCourseListByClassId" parameterType="map" resultMap="rm.course">
        SELECT cs.id,
        cs.timetable_id,
        cs.course_name,
        cs.`order`,
        cs.order_name,
        cs.start_time,
        cs.end_time,
        cs.week,
        cs.available,
        cs.last_update_date
        FROM course cs
        INNER JOIN timetable tt
        ON cs.timetable_id = tt.id
        WHERE tt.class_id = #{classId} and tt.available = 1 AND cs.week = #{week};
    </select>

    <insert id="insertTimeTable" flushCache="true" parameterType="TimeTable" keyProperty="id" useGeneratedKeys="true">
        INSERT INTO timetable (class_id, available, creation_date, last_update_date)
        VALUES ( #{classId}, 1, now(), now());
    </insert>

    <insert id="insertCourse" flushCache="true" parameterType="Course" keyProperty="id" useGeneratedKeys="true">
        INSERT INTO course
        (timetable_id,course_name,`order`,order_name,start_time,end_time,week,available,last_update_date)
        VALUES(#{timeTableId},#{courseName},#{order},#{orderName},#{startTime},#{endTime},#{week},1,now());
    </insert>

    <update id="updateCourse" flushCache="true" parameterType="Course">
        UPDATE course
        SET course_name = #{courseName},
        order_name = #{orderName},
        start_time = #{startTime},
        end_time = #{endTime}
        WHERE id = #{id}
    </update>

    <select id="queryDefaultClassBySchoolId" parameterType="int" resultMap="rm.fmcClass">
        SELECT id cls_id, school_id, grade, class, available
        FROM class
        WHERE school_id = #{school_id} AND available = 1
        LIMIT 0, 1
    </select>

    <select id="queryAllParentByClassId" parameterType="int" resultMap="rm.profile">
     select
          p.id,
          p.name,
          p.password,
          p.phone,
          p.salt,
          p.app_id,
          p.channel_id,
          p.creation_date,
          p.last_login_date,
          p.last_update_date,
          p.profile_type,
          p.online,
          p.available,
          p.last_pc_id,
          p.last_sdat_id,
          p.last_sdnf_id,
          p.last_sdnw_id,
          p.last_cl_id,
          p.last_pce_id,
          p.last_bbs_id,
          p.device_type
        from student std
        inner join parent_student_map psm
        on std.id=psm.student_id
        inner join profile p
        on p.id = psm.parent_id
        where std.class_id=#{classId};
    </select>

    <insert id="createSchool" useGeneratedKeys="true" keyProperty="id" flushCache="true">
        INSERT INTO school (`name`, province_id, city_id,
        <if test="@Ognl@id(addressId)">
            address_id,
        </if>
        last_update_date)
        VALUES (#{name}, #{provinceId}, #{cityId},
        <if test="@Ognl@id(addressId)">
            #{addressId},
        </if>
        now())
    </insert>

    <update id="updateSchool">
        UPDATE school
        SET name = #{name}, province_id = #{provinceId}, city_id = #{cityId}, last_update_date = now()
        <if test="@Ognl@id(addressId)">
            ,address_id = #{addressId}
        </if>
        WHERE id = #{id}
    </update>

    <select id="queryClassesBySchoolId" resultMap="rm.fmcClass">
        SELECT c.id `cls_id`, c.school_id, c.grade, c.class, c.available, c.head_teacher_id, c.last_update_date,
            p.name `teacherName`, count(s.id) `student_count`
        FROM class c
        LEFT JOIN profile p on c.head_teacher_id = p.id
        LEFT JOIN student s on s.class_id = c.id
        WHERE c.school_id = #{schoolId}
        GROUP BY c.id
    </select>

    <select id="queryClassByTeacherId" resultMap="rm.teacherClassRelationship">
        SELECT c.id `cls_id`, c.school_id, c.grade, c.class, c.available, c.head_teacher_id, c.last_update_date,
            p.name `teacherName`, count(s.id) `student_count`
        FROM class c
        LEFT JOIN teacher_class_map tcm ON tcm.class_id = c.id AND tcm.teacher_id = #{teacherId}
    </select>

    <select id="loadClass" resultMap="rm.fmcClass">
        SELECT c.id `cls_id`, c.school_id, c.grade, c.class, c.available, c.head_teacher_id, c.last_update_date,
        p.name `teacherName`, count(s.id) `student_count`
        FROM class c
        LEFT JOIN student s on s.class_id = c.id
        LEFT JOIN profile p on p.id = c.head_teacher_id
        WHERE c.id = #{classId}
    </select>

    <select id="queryTeacherClassRelationships" resultMap="rm.teacherClassRelationship">
        SELECT class_id, teacher_id, sub_title, available, head_teacher, creation_date, last_update_date
        FROM teacher_class_map tcm
        WHERE tcm.class_id = #{classId}
    </select>

    <insert id="createFmcClass" parameterType="fmcClass" keyProperty="id" useGeneratedKeys="true" flushCache="true">
        INSERT INTO class (school_id, grade, class, available, head_teacher_id, last_update_date)
        VALUES (#{schoolId}, #{grade}, #{realClass}, #{available}, #{headTeacherId}, now())
    </insert>

    <update id="updateFmcClass" parameterType="fmcClass" flushCache="true">
        UPDATE class SET grade = #{grade}, class = #{realClass}, available = #{available}, head_teacher_id = #{headTeacherId},
        last_update_date = now()
        WHERE id = #{id}
    </update>
</mapper>