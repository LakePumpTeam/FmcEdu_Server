<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.fmc.edu.teacher">

    <select id="queryTeacherById" parameterType="int" resultMap="rm.teacher">
        select p.id, p.name, p.phone, p.app_id, p.channel_id, p.creation_date, p.last_login_date, p.last_update_date,
        p.available, p.device_type,
        t.head_teacher, t.initialized, t.sex, t.resume, t.course, t.birth,
        scl.id as scl_id, scl.name as schoolName, scl.province_id, scl.city_id, scl.address_id
        from profile p
        left join teacher t
        on p.id = t.profile_id
        left join school scl
        on scl.id = t.school_id
        where t.profile_id = #{id}
    </select>

    <select id="queryHeaderTeacherByParentId" parameterType="int" resultType="map">
        select pf.id as profileId,t_pf.id as teacherId, t_pf.name as teacherName, st.sex as sex, cls.grade as
        grade,cls.class as class from
        profile pf
        left join parent p
        on pf.id = p.profile_id
        left join parent_student_map psm
        on p.profile_id=psm.parent_id
        left join student st
        on st.id= psm.student_id
        left join class cls
        on cls.id = st.class_id
        left join teacher_class_map tcm
        on tcm.class_id=cls.id
        left join teacher t
        on t.profile_id = tcm.teacher_id
        left join profile t_pf
        on t_pf.id=t.profile_id
        where tcm.head_teacher=1 and pf.id = #{profileId};
    </select>

    <select id="queryClassByTeacherId" parameterType="int" resultType="map">
        SELECT cls.id as id, cls.school_id as schoolId,cls.grade as grade,cls.class as class,
         cls.available as available,cls.head_teacher_id as headTeacherId
        FROM teacher_class_map tcm
        LEFT JOIN class cls
        on tcm.class_id=cls.id
        where tcm.teacher_id=#{teacherId};
    </select>

    <select id="queryClassById" parameterType="int" resultMap="rm.fmcClass">
        SELECT cls.id as id, cls.school_id as schoolId,cls.grade as grade,cls.class as class,
        cls.available as available,cls.head_teacher_id as headTeacherId
        FROM class cls
        where cls.id=#{classId};
    </select>

    <update id="updateTeacher" parameterType="TeacherProfile">
        UPDATE teacher
        LEFT JOIN profile ON id = profile_id
        SET name = #{name}, phone = #{phone}, sex = #{male}, resume = #{resume}, course = #{course}, birth = #{birth}
        WHERE id = #{id}
    </update>

    <select id="queryTeachersBySchoolId" resultMap="rm.teacher">
        SELECT id, name, phone, sex, head_teacher, initialized, birth, resume, course, app_id, available, channel_id, device_type,
            creation_date, last_login_date, last_update_date
        FROM profile p
        LEFT JOIN teacher t ON p.id = t.profile_id AND p.profile_type = 1
        WHERE t.school_id = #{schoolId}
    </select>

    <select id="queryTeacherClassRelationships" resultMap="rm.teacherClassRelationship">
        SELECT class_id, teacher_id, sub_title, available, head_teacher, creation_date, last_update_date
        FROM teacher_class_map tcm
        WHERE tcm.teacher_id = #{teacherId}
    </select>

    <insert id="initialTeacherProfile" parameterType="BaseProfile" keyProperty="id" useGeneratedKeys="true">
        INSERT INTO profile (`name`, phone, password, salt, available, profile_type, creation_date, last_update_date, device_type)
        VALUES (#{name}, #{phone}, #{password}, #{salt}, #{available}, #{profileType}, now(), now(), null)
    </insert>

    <insert id="initialTeacher" parameterType="TeacherProfile">
        INSERT INTO teacher (profile_id, school_id, sex, head_teacher, course, resume, birth)
        VALUES (#{id}, #{school.id}, #{male}, #{headTeacher}, #{course}, #{resume}, #{birth})
    </insert>

    <update id="updateTeacherProfile" parameterType="BaseProfile">
        UPDATE profile SET `name` = #{name}, available = #{available}, last_update_date = now()
        WHERE id = #{id}
    </update>

    <update id="updateTeacherDetail" parameterType="TeacherProfile">
        UPDATE teacher SET head_teacher = #{headTeacher}, sex = #{male}, initialized = #{initialized}, resume = #{resume}, course =
        #{course}, birth = #{birth}
        WHERE profile_id = #{id}
    </update>

    <update id="updateTeacherAccount" parameterType="BaseProfile">
        UPDATE profile SET phone = #{phone}, password = #{password}, salt = #{salt}
        WHERE id = #{id}
    </update>

    <insert id="createTeacherClassRelationship" parameterType="TeacherClassRelationship" keyProperty="id"
            useGeneratedKeys="true">
        INSERT INTO `teacher_class_map` (`teacher_id`, `class_id`,`sub_title`, `head_teacher`, `available`, `creation_date`,
        `last_update_date`)
        VALUES (#{teacherId}, #{classId}, #{subTitle}, #{headTeacher}, #{available}, now(), now());
    </insert>

    <update id="resetAllHeadTeacherRelationship" parameterType="int">
        UPDATE teacher_class_map SET head_teacher = 0
        WHERE class_id = #{classId}
    </update>

    <update id="updateHeadTeacherRelationship" parameterType="map">
        UPDATE teacher_class_map tcm, class cl SET tcm.head_teacher = 1, cl.head_teacher_id = #{teacherId}
        WHERE tcm.class_id = #{classId} AND tcm.teacher_id = #{teacherId} AND cl.id = ${classId}
    </update>

    <select id="queryTeacherNotInClass" resultMap="rm.teacher">
        SELECT p.id, p.name, phone, sex, t.head_teacher, initialized, birth, resume, course, app_id, p.available, channel_id, device_type,
        p.creation_date, last_login_date, p.last_update_date
        FROM profile p
        LEFT JOIN teacher t ON p.id = t.profile_id
        LEFT JOIN school s ON s.id = t.school_id
        LEFT JOIN class c ON c.school_id = s.id
        WHERE p.profile_type = 1
        AND c.id = #{classId}
        AND p.id NOT IN (SELECT tcm.teacher_id FROM teacher_class_map tcm WHERE class_id = #{classId})
    </select>

    <update id="updateTeacherClassRelationship" parameterType="TeacherClassRelationship">
        UPDATE teacher_class_map
        SET sub_title = #{subTitle}, available = #{available}, head_teacher = #{headTeacher}, last_update_date = now()
        WHERE class_id = #{classId} AND teacher_id = #{teacherId}
    </update>

    <update id="updateTeacherClassRelationshipAvailableBatch">
        <foreach collection="array" item="item" index="index" open="" close="" separator=";">
            UPDATE teacher_class_map
            <set>
                available = #{item.available}, last_update_date = now()
            </set>
            WHERE teacher_id = #{item.teacherId} AND class_id = #{item.classId}
        </foreach>
    </update>
</mapper>