<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.fmc.edu.profile.parent">

    <sql id="condition_parent">
		profile_type = 2
	</sql>

    <sql id="condition_temp_parent">
		profile_type = 9
	</sql>

    <insert id="initialProfile" parameterType="BaseProfile">
        INSERT INTO profile (phone, password, salt, last_update_date, profile_type,creation_date)
        VALUES (#{phone},#{password},#{salt}, now(), #{profileType}, now())
	</insert>

    <update id="initialParentProfile" parameterType="ParentProfile">
        UPDATE profile
        LEFT JOIN parent ON id = profile_id
        SET `name` = #{name}, last_update_date = #{lastUpdateDate}, free_trial_end_date = #{freeTrialEndDate},
        address_id = #{addressId},
        profile_Type = 2
        WHERE phone = #{phone} and free_trial_end_date IS NULL AND
        (
        <include refid="condition_temp_parent"/>
        or<include refid="condition_parent"/>)
    </update>

    <insert id="insertParentProfile" parameterType="string">
        INSERT INTO parent (profile_id, address_id, paid, free_trial)
		VALUES (#{id}, #{addressId},0, 0)
	</insert>

    <insert id="persistParentAddress" useGeneratedKeys="true" keyProperty="id"
			parameterType="Address">
		INSERT INTO address (province_id, city_id, full_address, creation_date, last_update_date)
		VALUES (#{provinceId}, #{cityId}, #{address}, #{creationDate}, #{lastUpdateDate});
	</insert>

	<select id="queryParentByPhone" parameterType="string" resultMap="rm.parent">
		SELECT id, `name`, phone, app_id, channel_id, creation_date, last_login_date, last_update_date, available, address_id, paid,
		free_trial, free_trial_end_date
		FROM profile
		LEFT JOIN parent ON id = profile_id
		WHERE phone = #{phone}
	</select>

    <insert id="initialParentStudentRelationship"
            parameterType="ParentStudentRelationship">
		INSERT INTO parent_student_map (parent_id, student_id, relationship, creation_date, last_update_date)
		VALUES (#{parentId}, #{studentId}, #{relationship}, #{creationDate}, #{lastUpdateDate})
		ON DUPLICATE KEY UPDATE relationship = #{relationship}, approved = 0, last_update_date = #{lastUpdateDate}
	</insert>

	<select id="queryAddressByPhone" parameterType="int" resultMap="rm.address">
		SELECT a.id, a.province_id, a.city_id, a.full_address, a.creation_date, a.last_update_date,
		c.name as `city`, prov.name as`province`
		FROM address a
		LEFT JOIN parent par ON par.address_id = a.id
		LEFT JOIN profile pro ON pro.id = par.profile_id
		LEFT JOIN city c ON a.city_id = c.id
		LEFT JOIN province prov ON a.province_id = prov.id
		WHERE pro.id = #{profileId}
	</select>

	<select id="queryParentById" parameterType="int" resultMap="rm.parent">
		SELECT id, `name`, phone, app_id, channel_id, creation_date, last_login_date, last_update_date, available, address_id, paid,
		free_trial, free_trial_end_date
		FROM profile
		LEFT JOIN parent ON id = profile_id
		WHERE id = #{id}
	</select>

	<select id="queryParentStudentRelationship" parameterType="map" resultMap="ParentStudentRelationship">
		SELECT parent_id,
		student_id,
		relationship ,
		approved ,
		approved_date,
		creation_date,
		last_update_date
		from parent_student_map
		WHERE parent_id = #{parentId} and student_id=#{studentId}
	</select>

    <update id="updateParentAddress" parameterType="Address">
		UPDATE address
		SET province_id = #{provinceId}, city_id = #{cityId}, full_address = #{address}, last_update_date = #{lastUpdateDate}
		WHERE id = #{id}
	</update>

	<select id="queryParentDetailById" parameterType="int" resultMap="rm.parent">
        SELECT pro.id, pro.`name` as `name`, pro.phone, pro.app_id, pro.channel_id, pro.creation_date,
        pro.last_login_date, pro.last_update_date, pro.available, concat(pro.profile_type, '') as profile_type,
		par.address_id, paid, free_trial, free_trial_end_date,
		a.full_address, c.id as cityId, c.name as city, prov.id as provinceId, prov.name as province,
		s.id as studentId, s.name as studentName, s.sex, s.birth, s.ring_number, s.ring_phone,
		class.id as classId, class.grade, class.class, sch.id as schoolId, sch.name as schoolName,
		m.relationship, t.profile_id as teacherId, tpro.name as teacherName
		FROM profile pro
		LEFT JOIN parent par ON pro.id = profile_id
		LEFT JOIN address a ON par.address_id = a.id
		LEFT JOIN city c ON a.city_id = c.id
		LEFT JOIN province prov ON a.province_id = prov.id
		LEFT JOIN parent_student_map m ON pro.id = m.parent_id
		LEFT JOIN student s ON m.student_id = s.id
		LEFT JOIN class class ON class.id = s.class_id
		LEFT JOIN school sch ON sch.id = class.school_id
		LEFT JOIN teacher t ON t.profile_id = class.head_teacher_id
		LEFT JOIN profile tpro ON t.profile_id = tpro.id
		WHERE pro.id = #{id}
	</select>

    <update id="updateProfileName" parameterType="BaseProfile">
        UPDATE profile
        SET name = #{name}
        WHERE id = #{id};
    </update>


</mapper>